//! # Synchronicity
//!
//! > A connecting principle linked to the invisible.
//! > Almost imperceptible. Something inexpressible.
//!
//! â€”The Police, *Synchronicity I*
//!
//! Distributed build system providing cryptographic proofs-of-reproducibility
//! via Byzantine Fault Tolerant (BFT) consensus.
//!
//! [Documentation](https://bitly.com/98K8eH)
//!
//! ## About
//!
//! **Synchronicity** is a distributed build system for Rust crates which have
//! been published to [crates.io]. It builds crates reproducibly inside of Docker
//! containers managed using [Rustwide], the core library behind tools like
//! [Crater] and [docs.rs].
//!
//! Builders running **Synchronicity** also run a BFT consensus algorithm between
//! each other (as part of a closed, "permissioned" group), and in doing so come to
//! agreement on whether or not a build was successfully reproduced by a threshold
//! of the group. Consensus is provided by [Libra's HotStuff BFT][hotstuff].
//!
//! Any builder can submit a build to be run by the rest of the group. The results
//! of the build are then published as part of a commit-and-reveal scheme.
//! After all builders have completed the build, or a timeout is reached, the
//! builders reveal hashes identifying the build artifacts, and if a threshold
//! of them match, evidence thereof is stored in an append-only Merkle log
//! generated by the consensus group.
//!
//! Once evidence of a successful build reproduction has been published in the log,
//! clients interested in determining if they should trust a particular build can
//! request cryptographic proof-of-inclusion that it has been successfully
//! reproduced. So long as a threshold of the group does not collude to publish
//! fraudulent reproducibility results, this cryptographic proof can be trusted
//! as evidence that a build with a matching hash is reproducible from the
//! original source code published on [crates.io].
//!
//! [crates.io]: https://crates.io
//! [Rustwide]: https://github.com/rust-lang/rustwide
//! [Crater]: https://github.com/rust-lang/crater
//! [docs.rs]: https://docs.rs/about
//! [hotstuff]: https://github.com/libra/libra/tree/master/consensus

#![forbid(unsafe_code)]
#![warn(rust_2018_idioms, unused_lifetimes, unused_qualifications)]

pub mod application;
pub mod commands;
pub mod config;
pub mod error;
pub mod prelude;
